import { build } from "esbuild";
import { lessLoader } from "esbuild-plugin-less";
import { promises } from "fs";
const { copyFile, rename, writeFile } = promises;

const banner = `/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source visit the plugins github repository
*/
`;

const obPlugin = {
  name: "obsidian-plugin",
  setup: (build) => {
    build.onEnd(async () => {
      // fix default css output file name
      const { outfile } = build.initialOptions;
      try {
        await rename(
          outfile.replace(/\.js$/, ".css"),
          outfile.replace(/main\.js$/, "styles.css"),
        );
      } catch (err) {
        if (err.code !== "ENOENT") throw err;
      }

      // copy manifest.json to build dir
      await copyFile("manifest.json", "build/manifest.json");

      // create .hotreload if it doesn't exist
      try {
        await writeFile("build/.hotreload", "", { flag: "wx" });
      } catch (err) {
        if (err.code !== "EEXIST") throw err;
      }

      console.log("build finished");
    });
  },
};

const isProd = process.env.BUILD === "production";

try {
  await build({
    entryPoints: ["src/wt-main.ts"],
    bundle: true,
    watch: !isProd,
    platform: "browser",
    external: ["obsidian"],
    format: "cjs",
    mainFields: ["browser", "module", "main"],
    banner: { js: banner },
    sourcemap: isProd ? false : "inline",
    minify: isProd,
    define: {
      "process.env.NODE_ENV": JSON.stringify(process.env.BUILD),
    },
    outfile: "build/main.js",
    plugins: [lessLoader(), obPlugin],
  });
} catch (err) {
  console.error(err);
  process.exit(1);
}
